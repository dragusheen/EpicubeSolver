#!/usr/bin/python3

import os
import time
import termios

from rich.console import Console
from rich.prompt import Confirm
from rich.panel import Panel

from rubiksCube import RubiksCube
from camera import Camera


class EpicubeSolver:
    rubiksCube = None
    isRunning = True

    def __init__(self):
        self.console = Console()
        self.prompt = Confirm()

    def clear_screen(self):
        os.system('clear')

    def _addCubeWithColor(self, colors, cube, k, i, j, pos):
        z, y, x = pos
        if k == z and i == y and j == x:
            return f"[purple on #F47983]{colors[cube[k][i][j]]}■[/] [/]"
        else:
            return f"{colors[cube[k][i][j]]}■[/] "

    def _displayBuildingCube(self, cube, pos):
        colors = {'W': '[bright_white]', 'R': '[red3]', 'G': '[chartreuse3]', 'O': '[dark_orange3]', 'B': '[dark_blue]', 'Y': '[yellow2]'}
        display = ""
        for i in range(3):
            display += "        "
            for j in range(3):
                display += self._addCubeWithColor(colors, cube, 0, i, j, pos)
            display += "\n"
        display += "\n"
        for i in range(3):
            for j in range(3):
                display += self._addCubeWithColor(colors, cube, 1, i, j, pos)
            display += "  "
            for j in range(3):
                display += self._addCubeWithColor(colors, cube, 2, i, j, pos)
            display += "  "
            for j in range(3):
                display += self._addCubeWithColor(colors, cube, 3, i, j, pos)
            display += "  "
            for j in range(3):
                display += self._addCubeWithColor(colors, cube, 4, i, j, pos)
            display += "\n"
        display += "\n"
        for i in range(3):
            display += "        "
            for j in range(3):
                display += self._addCubeWithColor(colors, cube, 5, i, j, pos)
            display += "\n"
        self.console.print(Panel(display, border_style="green", expand=False))

    def buildCube(self):
        cube = [];
        ok = False
        while (not ok):
            confirm_result = self.prompt.ask("Do you want to use the camera to build the cube ?", default=True)

            if confirm_result:
                cam = Camera()
                cam.start()
                try:
                    cube = cam.getCube()
                except:
                    self.console.print("[bold red]An error occured while trying to get the cube from the camera. Please try again.[/bold red]")
                    want_to_exit = self.prompt.ask("Do you want to continue ?", default=True)
                    if (not want_to_exit):
                        return
                    continue
            else:
                cube = [
                    [['W', 'W', 'W'], ['W', 'W', 'W'], ['W', 'W', 'W']],
                    [['O', 'O', 'O'], ['O', 'O', 'O'], ['O', 'O', 'O']],
                    [['G', 'G', 'G'], ['G', 'G', 'G'], ['G', 'G', 'G']],
                    [['R', 'R', 'R'], ['R', 'R', 'R'], ['R', 'R', 'R']],
                    [['B', 'B', 'B'], ['B', 'B', 'B'], ['B', 'B', 'B']],
                    [['Y', 'Y', 'Y'], ['Y', 'Y', 'Y'], ['Y', 'Y', 'Y']]
                ]
            i = 0
            j = 0
            order = ['Up', 'Left', 'Front', 'Right', 'Back', 'Down']
            index = 0;
            while (index < 6):
                self.clear_screen()
                self._displayBuildingCube(cube, (index, i, j))
                color = self.console.input(f"[bold magenta]Please enter the colors for the {order[index]} face at position ({i}, {j})[/bold magenta]\n>> ")
                if color.upper() not in ['W', 'R', 'G', 'O', 'B', 'Y', 'Q'] and color.upper() not in ['WHITE', 'RED', 'GREEN', 'ORANGE', 'BLUE', 'YELLOW', 'QUIT'] and color != '':
                    self.console.print(f"[bold red]Invalid color : {color}. Please try again.[/bold red]")
                    want_to_exit = self.prompt.ask("Do you want to continue ?", default=True)
                    if (not want_to_exit):
                        return
                    continue
                if color.upper() == 'Q' or color.upper() == 'QUIT':
                    self.console.print("[bold red]Build canceled.[/bold red]")
                    return
                if color.upper() == '':
                    color = cube[index][i][j]
                cube[index][i][j] = color.upper()[0]
                self.clear_screen()
                self._displayBuildingCube(cube, (index, i, j))
                confirm_result = self.prompt.ask(f"Do you want to set the color {color.upper()} for the {order[index]} face at position ({i}, {j}) ?", default=True)
                if confirm_result:
                    cube[index][i][j] = color.upper()
                    j += 1
                    if j == 3:
                        j = 0
                        i += 1
                        if i == 3:
                            i = 0
                            index += 1
            check = [0, 0, 0, 0, 0, 0]
            for i in range(6):
                for j in range(3):
                    for k in range(3):
                        if cube[i][j][k] == 'W':
                            check[0] += 1
                        elif cube[i][j][k] == 'R':
                            check[1] += 1
                        elif cube[i][j][k] == 'G':
                            check[2] += 1
                        elif cube[i][j][k] == 'O':
                            check[3] += 1
                        elif cube[i][j][k] == 'B':
                            check[4] += 1
                        elif cube[i][j][k] == 'Y':
                            check[5] += 1
            if check[0] == 9 and check[1] == 9 and check[2] == 9 and check[3] == 9 and check[4] == 9 and check[5] == 9:
                ok = True
            else:
                self.console.print("[bold red]The cube is not correctly built. Please try again.[/bold red]")
                self.console.print("[bold red]The cube should have 9 white, 9 red, 9 green, 9 orange, 9 blue and 9 yellow squares.[/bold red]")
                self.console.print(f"[bold red]But the cube has {check[0]} white, {check[1]} red, {check[2]} green, {check[3]} orange, {check[4]} blue and {check[5]} yellow squares.[/bold red]")
                self.console.print("[bold red]Let's restart.[/bold red]")
                time.sleep(2)
        self.rubiksCube = RubiksCube(cube)
        self.console.print("[bold green]The cube has been successfully built![/bold green]")
        self.rubiksCube.show()
        self.console.input("\nPress [bold yellow]Enter[/bold yellow] to continue...")

    def _loopCubeNotExist(self):
        self.console.print("[bold magenta] Default | d - To generate a default cube[/bold magenta]")
        self.console.print("[bold magenta] Build   | b - To build a cube[/bold magenta]")
        self.console.print("[bold magenta] Quit    | q - To exit the program[/bold magenta]")
        choice = self.console.input("[bold yellow]Please enter your choice: [/bold yellow]")
        self.console.print("")
        if choice.lower() == "d" or choice.lower() == "default":
            self.rubiksCube = RubiksCube()
            self.rubiksCube.show()
            self.console.input("\nPress [bold yellow]Enter[/bold yellow] to continue...")
        elif choice.lower() == "b" or choice.lower() == "build":
            self.buildCube()
        elif choice.lower() == "q" or choice.lower() == "quit":
            self.isRunning = False
        else:
            self.console.print(f"[bold red]Invalid choice : {choice}. Please try again.[/bold red]")
            time.sleep(2)

    def _moveCube(self):
        possible_moves = ['U', 'L', 'F', 'R', 'B', 'D']
        possible_rep = ['', "'", '2']
        end = False
        while not end:
            self.clear_screen()
            self.rubiksCube.show()
            moves = self.console.input("[bold yellow]Please enter the moves you want to do on the cube: [/bold yellow]")
            list = moves.split(" ")
            for move in list:
                if len(move) == 1:
                    if move.upper() not in possible_moves:
                        self.console.print(f"[bold red]Invalid move : {move}. Please try again.[/bold red]")
                        continue
                    self.rubiksCube.rotate(move.upper())
                elif len(move) == 2:
                    if move[0].upper() not in possible_moves or move[1] not in possible_rep:
                        self.console.print(f"[bold red]Invalid move : {move}. Please try again.[/bold red]")
                        continue
                    self.rubiksCube.rotate(move[0].upper() + move[1])
                else:
                    self.console.print(f"[bold red]Invalid move : {move}. Please try again.[/bold red]")
                    continue
            self.rubiksCube.show()
            end = not self.prompt.ask("Do you want to continue ?", default=True)

    def _loopCubeExist(self):
        self.console.print("[bold magenta] Move    | m - To do some moves on the cube[/bold magenta]")
        self.console.print("[bold magenta] Solve   | s - To solve the cube[/bold magenta]")
        self.console.print("[bold magenta] Shuffle | x - To shuffle the cube[/bold magenta]")
        self.console.print("[bold magenta] Reset   | r - To reset the cube[/bold magenta]")
        self.console.print("[bold magenta] View    | v - To view the cube[/bold magenta]")
        self.console.print("[bold magenta] Quit    | q - To exit the program[/bold magenta]")
        choice = self.console.input("[bold yellow]Please enter your choice: [/bold yellow]")
        self.console.print("")
        if choice.lower() == "m" or choice.lower() == "move":
            self._moveCube()
        elif choice.lower() == "s" or choice.lower() == "solve":
            moves = self.rubiksCube.solve()
            recap = ""
            for i in range(len(moves)):
                recap += moves[i]
                if i != len(moves) - 1:
                    recap += " "
            self.console.print(f"[bold green]The cube has been solved with the following moves[/bold green]\n>> {recap}")
            self.rubiksCube.show()
            self.console.input("\nPress [bold yellow]Enter[/bold yellow] to continue...")
        elif choice.lower() == "x" or choice.lower() == "shuffle":
            moves = self.console.input("[bold yellow]Please enter the number of moves you want to shuffle the cube with: [/bold yellow]")
            if moves.isdigit() and int(moves) > 0:
                self.console.print(f"[bold green]Shuffling the cube with {moves} moves...[/bold green]")
                list = self.rubiksCube.shuffle(int(moves))
                recap = ""
                for i in range(len(list)):
                    recap += list[i]
                    if i != len(list) - 1:
                        recap += " "
                self.console.print(f">> {recap}")
                self.rubiksCube.show()
                self.console.input("\nPress [bold yellow]Enter[/bold yellow] to continue...")
            else:
                self.console.print("[bold red]Invalid number of moves. Please try again.[/bold red]")
                time.sleep(2)
        elif choice.lower() == "r" or choice.lower() == "reset":
            self.rubiksCube.reset()
            self.rubiksCube.show()
            self.console.input("\nPress [bold yellow]Enter[/bold yellow] to continue...")
        elif choice.lower() == "v" or choice.lower() == "view":
            self.rubiksCube.show()
            self.console.input("\nPress [bold yellow]Enter[/bold yellow] to continue...")
        elif choice.lower() == "q" or choice.lower() == "quit":
            self.isRunning = False
        else:
            self.console.print(f"[bold red]Invalid choice : {choice}. Please try again.[/bold red]")
            time.sleep(2)

    def run(self):
        self.clear_screen()
        while self.isRunning:
            self.console.print("[bold magenta]Welcome to Epicube Solver![/bold magenta]")
            self.console.print("[bold magenta]Please choose an option from the following:[/bold magenta]")
            if self.rubiksCube is None:
                self._loopCubeNotExist()
            else:
                self._loopCubeExist()
            self.clear_screen()

def main():
    solver = EpicubeSolver()
    solver.run()

if __name__ == "__main__":
    main()
