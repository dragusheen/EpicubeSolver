#!/usr/bin/python3

from rich import print

import cv2

from PIL import Image

def make_sample_image(colors):
    Color = Colors()
    s = 50
    default = Image.new("RGB", (s * 3, s * 3))
    nearest = Image.new("RGB", (s * 3, s * 3))
    x = 0
    y = 0
    for color in colors:
        r1, g1, b1 = color
        r2, g2, b2 = Color.getNearColor(color)
        for j in range(s):
            for i in range(s):
                default.putpixel((i + 50 * x, j + 50 * y), (r1, g1, b1))
                nearest.putpixel((i + 50 * x, j + 50 * y), (r2, g2, b2))
        x += 1
        if x == 3:
            x = 0
            y += 1
    default.show()
    nearest.show()

class Camera:
    gallery = []
    distance = 24
    isOpen = True

    def __init__(self):
        self.cap = cv2.VideoCapture(0)

    def __del__(self):
        self.cap.release()
        cv2.destroyAllWindows()

    def capture(self):
        ret, frame = self.cap.read()
        if not ret:
            print("Error: Could not capture frame.")
            return
        height, width, _ = frame.shape
        height = height // 2
        width = width // 2
        color = []
        for i in range(-1, 2):
            for j in range(-1, 2):
                x = width + (self.distance * 2 * j)
                y = height + (self.distance * 2 * i)
                b, g, r = frame[y, x]
                color.append((r, g, b))
        make_sample_image(color)
        self.gallery.append(color)

    def draw_circle(self, frame, pos):
        radius = self.distance // 2
        cv2.circle(frame, pos, radius, (255, 0, 0), 2)

    def draw(self, frame):
        height, width, _ = frame.shape
        height = height // 2
        width = width // 2
        for i in range(-1, 2):
            for j in range(-1, 2):
                x = width + (self.distance * 2 * i)
                y = height + (self.distance * 2 * j)
                self.draw_circle(frame, (x, y))

    def live(self):
        while (self.isOpen):
            ret, frame = self.cap.read()
            self.draw(frame)
            if not ret:
                print("Error: Could not capture frame.")
                break
            cv2.imshow('Camera', frame)
            key = cv2.waitKey(30)
            self.event_handler(key)

    def event_handler(self, key):
        if key == 27 or key == ord('q'):
            self.isOpen = False
            print("Closing...")
        if key == ord(' '):
            print("Capturing...")
            self.capture()
        if key == 82:
            print("Zooming in...")
            self.distance += 1
        if key == 84:
            print("Zooming out...")
            self.distance -= 1
        if key == ord('r'):
            print("Refreshing...")
            self.distance = 24

class Colors:
    colors = {
        "blue": (0, 0, 255),
        "green": (0, 255, 0),
        "orange": (255, 165, 0),
        "red": (255, 0, 0),
        "white": (255, 255, 255),
        "yellow": (255, 255, 0)
    }

    def __init__(self):
        pass

    def distance(self, c1, c2):
        r1, g1, b1 = c1
        r2, g2, b2 = c2
        return ((r1 - r2) ** 2 + (g1 - g2) ** 2 + (b1 - b2) ** 2) ** 0.5

    def getNearColor(self, c):
        r, g, b = c
        distances = []
        for color in self.colors.values():
            distances.append(self.distance(c, color))
        index = distances.index(min(distances))
        return list(self.colors.values())[index]



Cam = Camera()
Cam.live()
# camColors = Cam.getColors()
# Color = Colors()
# for colors in camColors:
#     print("Colors:")
#     for color in colors:
#         print(f"{color}: {Color.getNearColor(color)}")
#     print()